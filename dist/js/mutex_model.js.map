{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./js/mutex_model.ts"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","STATES","models","ncols","reduce","model","Math","max","col","colspan","model_map","Array","model_list","_ncols","concat","splice","length","dirty_data","_fill","MutexModel","USE_CHECK","FILL_EACHMODEL","append","fill","clear","index","indexOf","count","undefined","remove","move","v2","flags","USE_OFFSET","getModel","row","format","rect","round","min","trim","height","ceil","changed_models","idx","nstep","_pathTest","push","nrows","max_offset","optimal_col","test_model","rowspan","max_col","offset","alloc","before_rect","trimmed_rect","crossed_models","cover","slice","crossed_rect","calcWrap","abs","_compress","sort","b","cascading_trimmed_rect","crossed_model","indenting_models","models_nrow","capture_models","capture_features","capture_nindents","new_capture_models","new_capture_features","new_capture_nindents","nindents","col_end","feature","loss_nindent","item","model_nindent","apply","Number","next_col","row_end","under_model","cm_idx","nindent","im_idx","map","USE_EACHOFFSET","mask","result","right","wrap","calcOffset","flee_rect","target_rect","arg","next_model","isFinite","isNaN","list_index","pop","wrap_rect","ec","er","oc","or","ic","ir","r_end","c_end","use_bw","vf","hf","f","trimmed_offset","lw","rw","bw","tw","sorted_directions","j","lastIndexOf"],"mappings":"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","file":"js/mutex_model.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\r\nimport { Model, Rect } from './interfaces';\r\n\r\nenum STATES {\r\n    USE_CHECK = 0x01,\r\n    FILL_EACHMODEL = 0x10,\r\n    USE_OFFSET = 0x100,\r\n    USE_EACHOFFSET = 0x1000,\r\n};\r\nclass MutexModel {\r\n    protected model_map: Array<Model | undefined> = new Array();\r\n    protected model_list: Array<Model> = new Array();\r\n    static STATES = STATES;\r\n    _ncols: number = null;\r\n    constructor(\r\n        models: Array<Model> = [],\r\n        ncols: number =\r\n            models.reduce(\r\n                (ncols, model) => Math.max(ncols, (model.col || 0) + (model.colspan || 1))\r\n                , 1\r\n            )\r\n    ) {\r\n        this.model_list = this.model_list.concat(models);\r\n        this.ncols = ncols;\r\n    }\r\n    get ncols(): number {\r\n        return this._ncols;\r\n    }\r\n    set ncols(ncols: number) {\r\n        if (ncols !== this._ncols) {\r\n            this._ncols = ncols;\r\n            this.model_map.splice(0, this.model_map.length);\r\n            let model_list = this.model_list.splice(0, this.model_list.length);\r\n            let dirty_data = this._fill(model_list, MutexModel.STATES.USE_CHECK | MutexModel.STATES.FILL_EACHMODEL);\r\n            this.append(dirty_data);\r\n        }\r\n    }\r\n\r\n    fill(models: Array<Model> | Model) {\r\n        models instanceof Array || (models = [models]);\r\n        this._fill(models, MutexModel.STATES.FILL_EACHMODEL);\r\n    }\r\n    clear(model: Model) {\r\n        let index = this.model_list.indexOf(model), count = 0;\r\n        ~index && (this.model_list.splice(index, 1));\r\n        while (~(index = this.model_map.indexOf(model))) {\r\n            count++;\r\n            this.model_map[index] = undefined;\r\n        }\r\n        return count;\r\n    }\r\n    remove(models: Array<Model> | Model) {\r\n        models instanceof Array || (models = [models]);\r\n        this._fill(models);\r\n    }\r\n    move(models: Array<Model> | Model, v2: [number, number] | Array<[number, number]>, flags: number = 0) {\r\n        models instanceof Array || (models = [models]);\r\n        this.remove(models);\r\n        this._fill(models, flags | MutexModel.STATES.FILL_EACHMODEL | MutexModel.STATES.USE_OFFSET, v2);\r\n    }\r\n    getModel(col: number, row: number): Model | undefined {\r\n        if (col >= 0 && row >= 0 && col < this.ncols) {\r\n            return this.model_map[col + row * this.ncols];\r\n        }\r\n    }\r\n    format(rect: Rect, col = rect.col, row = rect.row): Rect {\r\n        rect.col = Math.round(Math.max(Math.min(col, this.ncols - rect.colspan), 0));\r\n        rect.row = Math.round(Math.max(row, 0));\r\n        return rect;\r\n    }\r\n    trim(): Array<Model> {\r\n        let height = Math.ceil(this.model_map.length / this.ncols);\r\n        let changed_models = [];\r\n        for (let row = 1; row < height; row++) {\r\n            for (let col = 0; col < this.ncols; col++) {\r\n                let idx = row * this.ncols + col;\r\n                let model = this.model_map[idx];\r\n                if (model && model.row === row) {\r\n                    let nstep = this._pathTest([model], [0, -row - 1], model);\r\n                    if (nstep > 0) {\r\n                        changed_models.push(model);\r\n                        this.move([model], [0, -nstep]);\r\n                    }\r\n                    col += model.colspan - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return changed_models;\r\n    }\r\n\r\n    append(models: Array<Model> | Model) {\r\n        models instanceof Array || (models = [models]);\r\n        for (const model of models) {\r\n            model.colspan > this.ncols && (model.colspan = this.ncols);\r\n            let nrows = Math.ceil(this.model_map.length / this.ncols);\r\n            let max_offset = 0, optimal_col = 0;\r\n            let test_model = { col: 0, row: nrows, colspan: model.colspan, rowspan: model.rowspan };\r\n            for (let col = 0, max_col = this.ncols - model.colspan; col <= max_col; col++) {\r\n                test_model.col = col;\r\n                let offset = this._pathTest([test_model], [0, -nrows - 1], test_model);\r\n                if (max_offset < offset) {\r\n                    max_offset = offset as number;\r\n                    optimal_col = col;\r\n                }\r\n            }\r\n            model.col = optimal_col;\r\n            model.row = nrows - max_offset;\r\n            this._fill([model], MutexModel.STATES.FILL_EACHMODEL);\r\n        }\r\n\r\n    }\r\n    alloc(\r\n        rect: Rect,\r\n        before_rect?: Rect,\r\n        trimmed_rect: Rect = this.format({ ...rect }),\r\n        crossed_models: Array<Model> = this.cover(trimmed_rect)\r\n    ): Array<Model> {\r\n        let changed_models = crossed_models.slice();\r\n        if (crossed_models.length === 0) {\r\n            return changed_models;\r\n        }\r\n        let crossed_rect = this.calcWrap(crossed_models);\r\n        if (\r\n            before_rect &&\r\n            trimmed_rect.col === crossed_rect.col &&\r\n            trimmed_rect.row === crossed_rect.row &&\r\n            before_rect.colspan === crossed_rect.colspan &&\r\n            before_rect.rowspan === crossed_rect.rowspan &&\r\n            (Math.abs(rect.col - crossed_rect.col) / before_rect.colspan +\r\n                Math.abs(rect.row - crossed_rect.row)) / before_rect.rowspan < 0.1 &&\r\n            Math.abs(before_rect.col - crossed_rect.col) / before_rect.colspan +\r\n            Math.abs(before_rect.row - crossed_rect.row) / before_rect.rowspan > 1 &&\r\n            this.cover(before_rect).length === 0\r\n        ) {\r\n            this.move(\r\n                crossed_models,\r\n                [before_rect.col - crossed_rect.col, before_rect.row - crossed_rect.row]\r\n            );\r\n        } else if (\r\n            (\r\n                crossed_rect.colspan + crossed_rect.rowspan >\r\n                (trimmed_rect.colspan + trimmed_rect.rowspan) * 1.6\r\n            ) ||\r\n            !this._compress(trimmed_rect, crossed_models, crossed_rect, rect)\r\n        ) {\r\n            crossed_models.sort((a, b) => a.row - b.row);\r\n            let cascading_trimmed_rect = { ...trimmed_rect };\r\n            for (let i = 0; i < crossed_models.length; i++) {\r\n                let crossed_model = crossed_models[i];\r\n                if (\r\n                    this._compress(\r\n                        cascading_trimmed_rect,\r\n                        [crossed_model],\r\n                        crossed_model as Rect,\r\n                        undefined,\r\n                        false\r\n                    )) {\r\n                    crossed_models.splice(i--, 1);\r\n                } else {\r\n                    if (cascading_trimmed_rect.col > crossed_model.col) {\r\n                        cascading_trimmed_rect.colspan +=\r\n                            cascading_trimmed_rect.col - crossed_model.col;\r\n                        cascading_trimmed_rect.col = crossed_model.col;\r\n                    }\r\n                    if (\r\n                        cascading_trimmed_rect.col + cascading_trimmed_rect.colspan <\r\n                        crossed_model.col + crossed_model.colspan\r\n                    ) {\r\n                        cascading_trimmed_rect.colspan =\r\n                            crossed_model.col + crossed_model.colspan - cascading_trimmed_rect.col;\r\n                    }\r\n                }\r\n            }\r\n            if (crossed_models.length === 0) {\r\n                return changed_models;\r\n            }\r\n\r\n            let indenting_models: Model[] = [];\r\n            let models_nrow: number[] = [];\r\n\r\n            crossed_rect = this.calcWrap(crossed_models);\r\n            let colspan = trimmed_rect.colspan -\r\n                Math.max(crossed_rect.col - trimmed_rect.col, 0) -\r\n                Math.max(\r\n                    trimmed_rect.col + trimmed_rect.colspan -\r\n                    crossed_rect.colspan - crossed_rect.col\r\n                    , 0\r\n                );\r\n\r\n            let capture_models: Model[] = [\r\n                {\r\n                    col: Math.max(trimmed_rect.col, crossed_rect.col),\r\n                    row: trimmed_rect.row,\r\n                    colspan,\r\n                    rowspan: 0\r\n                }\r\n            ];\r\n            let capture_features: {\r\n                [key: number]: Array<{ row: number, rowspan: number }>\r\n            } = {};\r\n            let capture_nindents: Array<number[] | number> = [new Array(colspan).fill(trimmed_rect.rowspan)];\r\n\r\n\r\n            while (capture_models.length) {\r\n                let new_capture_models: Model[] = [];\r\n                let new_capture_features: {\r\n                    [key: number]: Array<{ row: number, rowspan: number }>\r\n                } = {};\r\n                let new_capture_nindents: Array<number[] | number> = [];\r\n                for (const key in capture_features) {\r\n                    capture_features[key].sort((a, b) => a.row - b.row);\r\n                }\r\n                for (let i = 0; i < capture_models.length; i++) {\r\n                    let model = capture_models[i];\r\n                    let nindents = capture_nindents[i] as Array<number>;\r\n                    for (let col = model.col, col_end = col + model.colspan; col < col_end; col++) {\r\n                        let feature = capture_features[col];\r\n                        if (feature) {\r\n                            let loss_nindent = 0;\r\n                            for (let index = 0; index < feature.length - 1; index++) {\r\n                                let item = feature[index];\r\n                                if (item.row < model.row) {\r\n                                    loss_nindent += feature[index + 1].row - (item.row + item.rowspan);\r\n                                } else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            nindents[col - model.col] -= loss_nindent;\r\n                        }\r\n                    }\r\n                    let model_nindent = Math.max.apply(Number, nindents);\r\n                    if (model_nindent > 0) {\r\n                        capture_nindents[i] = model_nindent;\r\n                        let index = indenting_models.indexOf(model);\r\n                        if (index === -1) {\r\n                            index = indenting_models.length;\r\n                            indenting_models.push(model);\r\n                            models_nrow.push(model_nindent);\r\n                        } else {\r\n                            if (models_nrow[index] >= model_nindent) {\r\n                                //console.log(models_nrow[index] , model_nindent);\r\n                                continue;\r\n                            } else {\r\n                                models_nrow[index] = model_nindent;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        capture_models.splice(i, 1);\r\n                        capture_nindents.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n                for (let index = 0; index < capture_models.length; index++) {\r\n                    let model = capture_models[index];\r\n                    let model_nindent = capture_nindents[index] as number;\r\n                    next_col:\r\n                    for (let col = model.col, col_end = col + model.colspan; col < col_end; col++) {\r\n                        for (\r\n                            let row = model.row + model.rowspan, row_end = row + model_nindent;\r\n                            row < row_end;\r\n                            row++\r\n                        ) {\r\n                            let under_model = this.model_map[col + row * this.ncols];\r\n                            if (under_model) {\r\n                                let cm_idx = new_capture_models.indexOf(under_model);\r\n                                let nindents: number[];\r\n                                let nindent = row_end - row + Math.max(model.row - under_model.row, 0);\r\n                                if (cm_idx === -1) {\r\n                                    let im_idx = indenting_models.indexOf(under_model);\r\n                                    if (im_idx >= 0 && models_nrow[im_idx] >= nindent) {\r\n                                        continue next_col;\r\n                                    }\r\n                                    new_capture_models.push(under_model);\r\n                                    new_capture_nindents.push(nindents = new Array(under_model.colspan).fill(0));\r\n                                    let feature = new_capture_features[col] || (new_capture_features[col] = []);\r\n                                    feature.push({\r\n                                        row: under_model.row,\r\n                                        rowspan: under_model.rowspan\r\n                                    });\r\n                                } else {\r\n                                    nindents = new_capture_nindents[cm_idx] as number[];\r\n                                }\r\n                                nindents[col - under_model.col] = Math.max(nindents[col - under_model.col], nindent);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                capture_models = new_capture_models;\r\n                capture_features = new_capture_features;\r\n                capture_nindents = new_capture_nindents;\r\n            }\r\n\r\n\r\n            indenting_models.splice(0, 1);\r\n            models_nrow.splice(0, 1);\r\n\r\n            this.move(indenting_models, models_nrow.map((row): [number, number] => [0, row]), MutexModel.STATES.USE_EACHOFFSET);\r\n            changed_models = changed_models.concat(indenting_models);\r\n        }\r\n        return changed_models;\r\n    }\r\n    cover(mask: Rect): Array<Model> {\r\n        let result = [];\r\n        let col = mask.col, row = mask.row;\r\n        for (let r = 0; r < mask.rowspan; r++) {\r\n            for (let c = 0; c < mask.colspan; c++) {\r\n                let model = this.model_map[(c + col) + (r + row) * this.ncols];\r\n                if (model !== undefined) {\r\n                    ~result.indexOf(model) || result.push(model);\r\n                    let right = model.colspan + model.col - 1;\r\n                    c + col < right && (c = right - col);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    calcWrap(models: Array<Model>): Rect {\r\n        let wrap = {\r\n            col: models[0].col,\r\n            row: models[0].row,\r\n            colspan: models[0].colspan,\r\n            rowspan: models[0].rowspan\r\n        };\r\n        for (let i = 1; i < models.length; i++) {\r\n            let model = models[i];\r\n            wrap.col > model.col && (wrap.colspan += wrap.col - model.col, wrap.col = model.col);\r\n            wrap.row > model.row && (wrap.rowspan += wrap.row - model.row, wrap.row = model.row);\r\n            wrap.colspan + wrap.col < model.col + model.colspan &&\r\n                (wrap.colspan += model.col + model.colspan - wrap.col - wrap.colspan);\r\n            wrap.rowspan + wrap.row < model.row + model.rowspan &&\r\n                (wrap.rowspan += model.row + model.rowspan - wrap.row - wrap.rowspan);\r\n        }\r\n        return wrap;\r\n    }\r\n    calcOffset(flee_rect: Rect, target_rect: Rect) {\r\n        return {\r\n            l: flee_rect.col - (target_rect.col + target_rect.colspan),\r\n            r: flee_rect.col + flee_rect.colspan - target_rect.col,\r\n            t: flee_rect.row - (target_rect.row + target_rect.rowspan),\r\n            b: flee_rect.row + flee_rect.rowspan - target_rect.row,\r\n        }\r\n    }\r\n    private _fill(models: Model[], flags: number | undefined = 0, arg?: any): Array<Model> | undefined {\r\n        const STATES = MutexModel.STATES;\r\n        let dirty_data: Array<Model> | undefined = flags & STATES.USE_CHECK ? [] : undefined;\r\n        let model_map = this.model_map;\r\n        let model_list = this.model_list;\r\n        let ncols = this.ncols;\r\n        next_model:\r\n        for (let index = 0; index < models.length; index++) {\r\n            let model = models[index];\r\n\r\n\r\n            if (flags & STATES.USE_CHECK) {\r\n                isFinite(model.colspan) || (model.colspan = 1);\r\n                isFinite(model.rowspan) || (model.rowspan = 1);\r\n                if (isNaN(model.col + model.row) || model.col + model.colspan > ncols) {\r\n                    dirty_data.push(model);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            let list_index = model_list.indexOf(model);\r\n            if (flags & STATES.FILL_EACHMODEL) {\r\n                if (list_index === -1) {\r\n                    model_list.push(model);\r\n                } else {\r\n                    continue;\r\n                }\r\n            } else {\r\n                if (list_index >= 0) {\r\n                    model_list.splice(list_index, 1);\r\n                }\r\n            }\r\n\r\n            if (flags & STATES.USE_EACHOFFSET) {\r\n                model.col += arg[index][0];\r\n                model.row += arg[index][1];\r\n            } else if (flags & STATES.USE_OFFSET) {\r\n                model.col += arg[0];\r\n                model.row += arg[1];\r\n            }\r\n            let { col, row, colspan, rowspan } = model;\r\n            //row + rowspan > this.nrows && (this.nrows = row + rowspan);\r\n            for (let r = 0; r < rowspan; r++) {\r\n                for (let c = 0; c < colspan; c++) {\r\n                    let idx = (c + col) + (r + row) * ncols;\r\n                    if (!(flags & STATES.USE_CHECK) || model_map[idx] === undefined) {\r\n                        model_map[idx] = flags & STATES.FILL_EACHMODEL ? model : arg;\r\n                    } else {\r\n                        do {\r\n                            while (c--) {\r\n                                model_map[(c + col) + (r + row) * ncols] = undefined;\r\n                            }\r\n                            c = colspan;\r\n                        } while (r--)\r\n                        flags & STATES.FILL_EACHMODEL && (model_list.pop());\r\n                        dirty_data.push(model);\r\n                        continue next_model;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dirty_data;\r\n    }\r\n    private _pathTest(models: Model[], v2: [number, number], wrap_rect: Model = this.calcWrap(models)): number | boolean {\r\n        let ec = v2[0] | 0, er = v2[1] | 0, oc = 0, or = 0, nstep = 0;\r\n        let ic = ec && ec / Math.abs(ec), ir = er && er / Math.abs(er);\r\n        while (oc !== ec || or !== er) {\r\n            oc !== ec ? (oc = oc + ic) : (or = or + ir);\r\n            if (\r\n                wrap_rect.col + oc < 0 ||\r\n                wrap_rect.col + oc + wrap_rect.colspan > this.ncols ||\r\n                wrap_rect.row + or < 0\r\n            ) {\r\n                return nstep;\r\n            }\r\n            for (const model of models) {\r\n                for (let r = model.row, r_end = r + model.rowspan; r < r_end; r++) {\r\n                    for (let c = model.col, c_end = c + model.colspan; c < c_end; c++) {\r\n                        let idx = c + oc + (r + or) * this.ncols;\r\n                        if (this.model_map[idx] && models.indexOf(this.model_map[idx]) === -1) {\r\n                            return nstep;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            nstep += 1;\r\n        }\r\n        return true;\r\n    }\r\n    private _compress(\r\n        trimmed_rect: Rect,\r\n        crossed_models: Array<Model> = this.cover(trimmed_rect),\r\n        crossed_rect: Rect = this.calcWrap(crossed_models),\r\n        rect?: Rect,\r\n        use_bw = true\r\n    ): boolean {\r\n        let vf = crossed_rect.colspan / crossed_rect.rowspan;\r\n        let hf = trimmed_rect.rowspan / trimmed_rect.colspan;\r\n        let f = (vf + hf) / 4;\r\n        vf = f + vf / 2;\r\n        hf = f + hf / 2;\r\n        let trimmed_offset = this.calcOffset(trimmed_rect, crossed_rect);\r\n        let offset = rect ? this.calcOffset(rect, crossed_rect) : trimmed_offset;\r\n        let lw: any[] = [Math.abs(hf * offset.l), [trimmed_offset.l, 0]], rw: any[] = [Math.abs(hf * offset.r), [trimmed_offset.r, 0], lw];\r\n        lw.push(rw); rw.push(lw);\r\n        let tw: any[] = [Math.abs(vf * offset.t), [0, trimmed_offset.t]], bw: any[];\r\n        if (use_bw) {\r\n            bw = [Math.abs(vf * offset.b), [0, trimmed_offset.b]];\r\n            tw.push(bw); bw.push(tw);\r\n        }\r\n        let sorted_directions = (use_bw ? [lw, rw, tw, bw] : [lw, rw, tw]).sort((a, b) => a[0] - b[0]);\r\n        for (let i = 0; i < sorted_directions.length; i++) {\r\n            let j = sorted_directions.lastIndexOf(sorted_directions[i][2]);\r\n            if (j > i) {\r\n                sorted_directions.splice(j, 1);\r\n                sorted_directions.splice(i + 1, 0, sorted_directions[i][2]);\r\n            }\r\n            if (this._pathTest(crossed_models, sorted_directions[i][1], crossed_rect) === true) {\r\n                this.move(crossed_models, sorted_directions[i][1]);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport default MutexModel;//这里糊一个根导出，让 MutexModel 可以在其他模块被定义\r\n//module.exports = MutexModel;//使用 module.exports 是为了import 和 require 都直接可用"],"sourceRoot":""}